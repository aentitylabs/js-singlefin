!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.jssinglefin=t():e.jssinglefin=t()}(this,(function(){return(()=>{"use strict";var e={46:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Follower=void 0;const r=n(591);t.Follower=class{constructor(e){this._state=new r.NullState,this._influencers=[],this._states={},this._trendStates={},this._name=e}get name(){return this._name}addInfluencer(e){this._influencers.push(e)}addState(e,t){t.name=e,this._states[e]=t}subscribe(e){this.addInfluencer(e),e.subscribe(this)}follow(e){this._influencers.forEach((t=>{t.follow(e,this._name)}))}on(e,t){this._trendStates[e]=this._states[t]}changeState(e){this._state=this._states[e]}handle(e,t){this._state.handle(this,e,t)}onTrendChange(e,t){this._trendStates[e]&&(this._state=this._trendStates[e]),this.handle(e,t)}set state(e){this._state=e}serialize(){return{name:this._name,state:this._state.name}}deserialize(e){this._name=e.name,this._state=this._states[e.state]}}},886:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Influencer=void 0,t.Influencer=class{constructor(){this._followers={},this._trends={}}subscribe(e){this._followers[e.name]=e}init(e){for(const t in e){const n=e[t];for(let e=0;e<n.length;e++)this._followers[n[e].name]&&this._followers[n[e].name].deserialize(n[e])}}follow(e,t){this._trends[e]||(this._trends[e]=[]),this._trends[e].push(this._followers[t])}newTrend(e,t){const n=this._trends[e];if(n)for(let r=0;r<n.length;r++)n[r].onTrendChange(e,t)}serialize(){const e={followers:{}};for(const t in this._followers){const n=this._followers[t];e.followers[t]=n.serialize()}return e}}},591:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NullState=void 0;const r=n(445);class s extends r.State{handle(e,t,n){}}t.NullState=s},445:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.State=void 0,t.State=class{constructor(){this._name=""}set name(e){this._name=e}get name(){return this._name}}},328:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Singlefin=void 0;const r=n(886),s=n(138),i=n(138),o=n(191),l=n(892);class d extends r.Influencer{constructor(){super(),this._entityStore=new s.EntityStore,this._currentTrend=i.EntityFactory.newEntity(this._entityStore,{entity:"Singlefin",ref:!1,properties:{trend:{value:""},trends:{value:{}}}}),this._entityStore.addSource("Singlefin",new o.SinglefinSource)}loadModel(e){return new Promise(((t,n)=>{e.load((e=>{this._model=i.EntityFactory.newEntity(this._entityStore,e),t()}))}))}setModel(e){this._model=i.EntityFactory.newEntity(this._entityStore,e)}get model(){return this._model}addSource(e,t){this._entityStore.addSource(e,t)}run(){(new l.HttpRoutingEngine).render({},void 0,this._model)}inform(e){const t=this._trends[e];this._currentTrend.trend=e,this._currentTrend.trends[e]=this.serializeFollowers(t),this._entityStore.sync(),this.newTrend(e,this._model),this._entityStore.sync()}informTo(e,t){const n=this._trends[t];return this._currentTrend.trend=t,this._currentTrend.trends[t]=this.serializeFollowers(n),this._entityStore.syncTo(e).then((()=>(this.init(this._currentTrend.trends),this.newTrend(this._currentTrend.trend,this._model),this._entityStore.syncTo(e))))}informFrom(e,t){this._entityStore.syncFrom(e,t,(()=>{this.init(this._currentTrend.trends),this.newTrend(this._currentTrend.trend,this._model);const e=this._trends[this._currentTrend.trend];this._currentTrend.trends[this._currentTrend.trend]=this.serializeFollowers(e)}))}serializeFollowers(e){const t=[];for(let n=0;n<e.length;n++)t.push(e[n].serialize());return t}}t.Singlefin=d},191:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SinglefinSource=void 0;const r=n(138);class s extends r.Source{load(e){return e}update(e){return e}delete(e){}}t.SinglefinSource=s},138:e=>{e.exports=require("js-entity-store")},892:e=>{e.exports=require("js-http-routing-engine")}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.State=e.Follower=e.Singlefin=void 0;const t=n(328);Object.defineProperty(e,"Singlefin",{enumerable:!0,get:function(){return t.Singlefin}});const s=n(46);Object.defineProperty(e,"Follower",{enumerable:!0,get:function(){return s.Follower}});const i=n(445);Object.defineProperty(e,"State",{enumerable:!0,get:function(){return i.State}})})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,